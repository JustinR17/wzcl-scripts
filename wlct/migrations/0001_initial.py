# Generated by Django 2.1.5 on 2019-01-14 22:30

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Clan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default='clan+#!invalid', max_length=64)),
                ('icon_link', models.CharField(default='clan+#!invalid', max_length=255)),
                ('image_path', models.CharField(default='clan+#!invalid', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Logger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msg', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('level', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, default='invalid', max_length=32)),
                ('name', models.CharField(default='missing no', max_length=64)),
                ('clan_text', models.CharField(default='clan+#!invalid', max_length=64)),
                ('clan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wlct.Clan')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, null=True)),
                ('description', models.CharField(max_length=2000, null=True)),
                ('number_players', models.IntegerField(default=-1)),
                ('teams_per_game', models.IntegerField(default=-1)),
                ('template', models.IntegerField(default=-1)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('number_rounds', models.IntegerField(default=-1)),
                ('is_finished', models.BooleanField(db_index=True, default=False)),
                ('has_started', models.BooleanField(db_index=True, default=False)),
                ('players_per_team', models.IntegerField(default=1)),
                ('private', models.BooleanField(db_index=True, default=False)),
                ('start_option_when_full', models.BooleanField(default=True)),
                ('host_sets_tourney', models.BooleanField(default=False)),
                ('start_locked', models.BooleanField(default=False)),
                ('max_players', models.IntegerField(default=-1)),
                ('template_settings', models.TextField()),
                ('multi_day', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentGame',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_game', models.BooleanField(default=False)),
                ('players_per_team', models.IntegerField(default=1)),
                ('game_link', models.CharField(max_length=255, null=True)),
                ('gameid', models.CharField(default='Invalid game id', max_length=255)),
                ('teams', models.CharField(db_index=True, max_length=255, null=True)),
                ('is_finished', models.BooleanField(db_index=True, default=False)),
                ('outcome', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentInvite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined', models.BooleanField(default=False)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wlct.Player')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wlct.Player')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('games', models.TextField()),
                ('round_number', models.IntegerField(default=0)),
                ('is_finished', models.BooleanField(default=False)),
                ('number_games', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(default=0)),
                ('players', models.IntegerField(default=1)),
                ('team_index', models.IntegerField(db_index=True, default=0)),
                ('wins', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='GroupStageTournament',
            fields=[
                ('tournament_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wlct.Tournament')),
                ('type', models.CharField(default='Group Stage', max_length=255)),
                ('groups', models.IntegerField(default=4)),
                ('player_per_group', models.IntegerField(default=4)),
                ('knockout_rounds', models.IntegerField(default=2)),
                ('third_place_game', models.BooleanField(default=False)),
            ],
            bases=('wlct.tournament',),
        ),
        migrations.CreateModel(
            name='SeededTournament',
            fields=[
                ('tournament_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wlct.Tournament')),
                ('type', models.CharField(default='Seeded', max_length=255)),
            ],
            bases=('wlct.tournament',),
        ),
        migrations.CreateModel(
            name='SwissTournament',
            fields=[
                ('tournament_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wlct.Tournament')),
                ('type', models.CharField(default='Swiss', max_length=255)),
                ('max_rating', models.IntegerField(default=0)),
                ('min_rating', models.IntegerField(default=0)),
                ('best_record', models.CharField(default='0-0', max_length=10)),
            ],
            bases=('wlct.tournament',),
        ),
        migrations.CreateModel(
            name='TournamentLog',
            fields=[
                ('logger_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wlct.Logger')),
            ],
            bases=('wlct.logger',),
        ),
        migrations.AddField(
            model_name='tournamentteam',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wlct.Tournament'),
        ),
        migrations.AddField(
            model_name='tournamentround',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wlct.Tournament'),
        ),
        migrations.AddField(
            model_name='tournamentplayer',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wlct.TournamentTeam'),
        ),
        migrations.AddField(
            model_name='tournamentplayer',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wlct.Tournament'),
        ),
        migrations.AddField(
            model_name='tournamentinvite',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wlct.Tournament'),
        ),
        migrations.AddField(
            model_name='tournamentgame',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wlct.TournamentRound'),
        ),
        migrations.AddField(
            model_name='tournamentgame',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wlct.Tournament'),
        ),
        migrations.AddField(
            model_name='tournament',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wlct.Player'),
        ),
        migrations.AddField(
            model_name='tournamentlog',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wlct.Tournament'),
        ),
        migrations.AddField(
            model_name='groupstagetournament',
            name='champion1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='first_place', to='wlct.TournamentTeam'),
        ),
        migrations.AddField(
            model_name='groupstagetournament',
            name='champion2',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='second_place', to='wlct.TournamentTeam'),
        ),
        migrations.AddField(
            model_name='groupstagetournament',
            name='champion3',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='third_place', to='wlct.TournamentTeam'),
        ),
    ]
